#! /usr/bin/env python 

import mmap, re, sys, os, time
import scipy.stats as stats
import scipy as sp
import pandas as pd
import numpy as np

start_0 = time.time()

### CONSTANTS ###
sun2kg = 1.988e30
yr2sec = 3.154e7
lsun = 3.828e26 #[W]
c = 2.998e8 #[m/s]

## PARAMETERS ##
n = 10
mlo, mhi = 5., 100.

## CURRENT PATH ##
cwd = os.getcwd()

##########################################################
### Define Power Law function for IMF and Distribution ###
##########################################################

## NUMBER OF STARS, PL SLOPE, MASS LIMITS ##
def randompl(n, pl, lo, hi):
    pl += 1.0
    r = np.random.uniform(0., 1, n)
    
    if pl != -1.0:
        norm = 1.0/(hi**pl - lo**pl)
        expo = np.log10(r/norm + lo**pl)/pl
        x = 10.0**expo
    else:
        norm = 1.0/(np.log(hi) - np.log(lo))
        x = np.exp(r/norm + np.log(lo))
    return x

## SEMI-MAJOR AXIS DISTRIBUTION IN RSUN ##
def randoma(n):
    a = 215.04*1.69*10**(np.random.uniform(0., 1, n)*np.log10(1690/1.69))
    return a

## ECCENTRICITY DISTRIBUTION ##
def randome(n):
    e = np.sqrt(np.random.uniform(0., 1, n))
    return e

## PL SLOPE ##
pl = -2.35

## PARAMTERS ##
nfiles = n
time_span = 200

mass = randompl(1000000, pl, 0.08, 100)
cut = 5.
lomass = len(np.where(mass < cut)[0])
himass = len(np.where(mass >= cut)[0])

#print(nfiles*(1+lomass/himass))
#print(1e6/(1+lomass/himass))

## LUMINOUSITY CUT ##
lcut_30 = 1e30 #erg/s
lcut_32 = 1e32
lcut_34 = 1e34
lcut_36 = 1e36
lcut_38 = 1e38

## BINARY ARRAYS ##
nns = np.repeat(0,time_span)
nbh = np.repeat(0,time_span)

nns30 = np.repeat(0,time_span)
nbh30 = np.repeat(0,time_span)

nns32 = np.repeat(0,time_span)
nbh32 = np.repeat(0,time_span)

nns34 = np.repeat(0,time_span)
nbh34 = np.repeat(0,time_span)

nns36 = np.repeat(0,time_span)
nbh36 = np.repeat(0,time_span)

nns38 = np.repeat(0,time_span)
nbh38 = np.repeat(0,time_span)


##########################################################
####             Parameters and File Save             ####
##########################################################
##########################################################
###            Evaluate Log Files for XRB              ###
##########################################################
names = ['t', 'M1', 'Mc1', 'k1', 'M2', 'Mc2', 'k2','a', 'e', 'R1', 'R2', 'rlof1', 'rlof2', 'mdot1', 'mdot2']

for i in range(n):
    filename = cwd+'/log/log'+str(i+1)+'.dat'
    filename_short = cwd+'/log/short'+str(i+1)+'.dat'
    
    #generate input parameters
    mass = randompl(2, pl, mlo, mhi)
    a = randoma(1)
    e = randome(1)
  
    #feed inputs to binary c
    os.system('./tbse M_1 '+str(mass[0])+' M_2 '+str(mass[1])+' separation '+ str(a[0])+' eccentricity '+str(e[0])+' > test.dat')
    os.system('head -n -2 test.dat > '+filename)
    os.system('mv '+'c_log2.dat log/'+'short'+str(i+1)+'.dat')

    #set up output dataframe
    df = pd.read_csv(cwd+'/log/log'+str(i+1)+'.dat', error_bad_lines=False, names=names)

    #calculate luminosities for primary component
    df['L1wd'] = 1e7*(6.67408e-11*df['M1']*sun2kg*df['mdot1']*(sun2kg/yr2sec))/7e6 # 7,000 km NS
    df['L1ns'] = 1e7*(6.67408e-11*df['M1']*sun2kg*df['mdot1']*(sun2kg/yr2sec))/1.2e4 # 12 km NS
    df['L1bh'] = 1e7*(df['mdot1']*(sun2kg/yr2sec)*c**2)/12.  # BH
    df.loc[df['mdot2'] < 0,{'L1wd', 'L1bh', 'L1ns'}] = 0 #special handling for massless remnants
    
    #calculate luminosities for secondary component
    df['L2wd'] = 1e7*(6.67408e-11*df['M2']*sun2kg*df['mdot2']*(sun2kg/yr2sec))/7e6 # 7,000 km NS
    df['L2ns'] = 1e7*(6.67408e-11*df['M2']*sun2kg*df['mdot2']*(sun2kg/yr2sec))/1.2e4 # 12 km NS
    df['L2bh'] = 1e7*(df['mdot2']*(sun2kg/yr2sec)*c**2)/12.  # BH
    df.loc[df['mdot2'] < 0,{'L2wd', 'L2ns', 'L2bh'}] = 0 #special handling for massless remnants
    
    
    new_in = []

    for k in df.index:
        if pd.api.types.is_number(df.t[int(k)]) is True:
            new_in.append(int(k))
    
    df = pd.DataFrame(index = df.index[new_in], data={'t': df.t[new_in], 'M1': df.M1[new_in], 'Mc1': df.Mc1[new_in], 'k1':\
    df.k1[new_in], 'M2': df.M2[new_in], 'Mc2': df.Mc2[new_in], 'k2': df.k2[new_in],'a': df.a[new_in], 'e': df.e[new_in], 'R1': \
    df.R1[new_in], 'R2': df.R2[new_in], 'rlof1': df.rlof1[new_in], 'rlof2': df.rlof2[new_in], 'mdot1': df.mdot1[new_in], 'mdot2':\
    df.mdot2[new_in]})
    
    
    for j in range(time_span):
        ss = np.where((df.t > j) & (df.t <= j+1))[0]    
        
        if len(ss) > 0:
            max1, max2 = np.max(df.L1ns[ss]), np.max(df.L2ns[ss])
            if max1 > max2:
                s = ss[np.where(df.L1ns[ss] == max1)[0]][0]
            if max1 <= max2:
                s = ss[np.where(df.L2ns[ss] == max2)[0]][0]      
            
            #######count ns and bh outcomes by luminosity cut###########
                  #nb 13->ns, 14->bh, a<=0 is a collapsed system#
            
            #no cut
            if (df.k1[s] == 13 and df.k2[s] < 13 and df.a[s] > 0) or (df.k2[s] == 13 and df.k1[s] < 13 and df.a[s] > 0): nns[j] += 1
            if (df.k1[s] == 14 and df.k2[s] < 13 and df.a[s] > 0) or (df.k2[s] == 14 and df.k1[s] < 13 and df.a[s] > 0): nbh[j] += 1
            
            #30 erg/s
            if (df.k1[s] == 13 and df.k2[s] < 13 and df.L1ns[s] > lcut_30 and df.a[s] > 0) or \
            (df.k2[s] == 13 and df.k1[s] < 13 and df.L2ns[s] > lcut_30 and df.a[s] > 0): nns30[j] += 1
            if (df.k1[s] == 14 and df.k2[s] < 13 and df.L1bh[s] > lcut_30 and df.a[s] >0) or \
            (df.k2[s] == 14 and df.k1[s] < 13 and df.L2bh[s] > lcut_30 and df.a[s] >0): nbh30[j] += 1
            
            #32 erg/s
            if (df.k1[s] == 13 and df.k2[s] < 13 and df.L1ns[s] > lcut_32 and df.a[s] > 0) or \
            (df.k2[s] == 13 and df.k1[s] < 13 and df.L2ns[s] > lcut_32 and df.a[s] > 0): nns32[j] += 1
            if (df.k1[s] == 14 and df.k2[s] < 13 and df.L1bh[s] > lcut_32 and df.a[s] >0) or \
            (df.k2[s] == 14 and df.k1[s] < 13 and df.L2bh[s] > lcut_32 and df.a[s] >0): nbh32[j] += 1

            #34 erg/s
            if (df.k1[s] == 13 and df.k2[s] < 13 and df.L1ns[s] > lcut_34 and df.a[s] > 0) or \
            (df.k2[s] == 13 and df.k1[s] < 13 and df.L2ns[s] > lcut_34 and df.a[s] > 0): nns34[j] += 1
            if (df.k1[s] == 14 and df.k2[s] < 13 and df.L1bh[s] > lcut_34 and df.a[s] >0) or \
            (df.k2[s] == 14 and df.k1[s] < 13 and df.L2bh[s] > lcut_34 and df.a[s] >0): nbh34[j] += 1
            
            #36 erg/s
            if (df.k1[s] == 13 and df.k2[s] < 13 and df.L1ns[s] > lcut_36 and df.a[s] > 0) or \
            (df.k2[s] == 13 and df.k1[s] < 13 and df.L2ns[s] > lcut_36 and df.a[s] > 0): nns36[j] += 1
            if (df.k1[s] == 14 and df.k2[s] < 13 and df.L1bh[s] > lcut_36 and df.a[s] >0) or \
            (df.k2[s] == 14 and df.k1[s] < 13 and df.L2bh[s] > lcut_36 and df.a[s] >0): nbh36[j] += 1
               
            #38 erg/s
            if (df.k1[s] == 13 and df.k2[s] < 13 and df.L1ns[s] > lcut_38 and df.a[s] > 0) or \
            (df.k2[s] == 13 and df.k1[s] < 13 and df.L2ns[s] > lcut_38 and df.a[s] > 0): nns38[j] += 1
            if (df.k1[s] == 14 and df.k2[s] < 13 and df.L1bh[s] > lcut_38 and df.a[s] >0) or \
            (df.k2[s] == 14 and df.k1[s] < 13 and df.L2bh[s] > lcut_38 and df.a[s] >0): nbh38[j] += 1
    
    ###use to delete output files and save space after counting
    #os.remove(cwd+'/log/short'+str(i+1)+'.dat')
    #os.remove(cwd+'/log/log'+str(i+1)+'.dat')

os.system('rm test.dat')   
          

#create table of arrays
K1 = pd.DataFrame()
K1['nns'] = nns
K1['nbh'] = nbh
K1['nns30'] = nns30
K1['nbh30'] = nbh30
K1['nns32'] = nns32
K1['nbh32'] = nbh32
K1['nns34'] = nns34
K1['nbh34'] = nbh34
K1['nns36'] = nns36
K1['nbh36'] = nbh36
K1['nns38'] = nns38
K1['nbh38'] = nbh38

K1.to_csv('K1_test.csv')   


##########################################################

print('Elapsed time:', time.time() - start_0 )
